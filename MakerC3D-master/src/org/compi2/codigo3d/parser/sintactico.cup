package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, IGUALACION, DIFERENTE, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, AND, OR, NOT;
nonterminal NodoC3D inicial, expresion, cond, relacional,oprel, oplog;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MAYORIGUAL,MENORIGUAL, MAYOR, MENOR,IGUALACION, DIFERENTE;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} cond:condicion
                    {: 
                        RESULT = condicion;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + condicion.getCad());
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                           RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :};

cond::= cond:cond1 oplog:op cond:cond2
            {:
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " = " + cond1.getCad() + " "+op.getCad() +" "+ cond2.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT=new NodoC3D(temp);
            :}
            | NOT cond:cond1 
            {:
                String temp = ControlC3D.generaTemp();
                String c3d = temp + " ! " + cond1.getCad()  + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT=new NodoC3D(temp);
            :}
            | relacional:rel {:RESULT=rel;:};

oplog::=AND {:RESULT=new NodoC3D("&&");:}
            | OR {:RESULT=new NodoC3D("||");:}; 

relacional::= expresion:exp1 oprel:op expresion:exp2
            {:
                 String temp = ControlC3D.generaTemp();
                String c3d = temp + " = " + exp1.getCad() +" "+ op.getCad() + " "+ exp2.getCad() + ";\n";
                ControlC3D.agregarC3D(c3d);
                RESULT=new NodoC3D(temp);
            :}    
                       | expresion:exp {:RESULT = exp;:};

oprel::= IGUALACION{:RESULT=new NodoC3D("==");:}
            | DIFERENTE{:RESULT=new NodoC3D("!=");:}
            | MAYOR{:RESULT=new NodoC3D(">");:}
            | MENOR{:RESULT=new NodoC3D("<");:}
            | MAYORIGUAL{:RESULT=new NodoC3D(">=");:}
            | MENORIGUAL{:RESULT=new NodoC3D("<=");:};




















